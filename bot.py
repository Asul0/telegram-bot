import os
import logging
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
)

from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TOKEN. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
menu = {
    "–ó–∞–∫—É—Å–∫–∏": ["–°—ã—Ä–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞ - 800 —Ä—É–±.", "–ë—Ä—É—Å–∫–µ—Ç—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏ - 450 —Ä—É–±."],
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": ["–°—Ç–µ–π–∫ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã - 1500 —Ä—É–±.", "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞ - 900 —Ä—É–±."],
    "–î–µ—Å–µ—Ä—Ç—ã": ["–¢–∏—Ä–∞–º–∏—Å—É - 600 —Ä—É–±.", "–ß–∏–∑–∫–µ–π–∫ - 550 —Ä—É–±."],
    "–ù–∞–ø–∏—Ç–∫–∏": ["–ú–æ—Ö–∏—Ç–æ - 400 —Ä—É–±.", "–í–∏–Ω–æ Merlot - 1200 —Ä—É–±./–±–æ–∫–∞–ª"],
}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å 10:00 –¥–æ 20:00 (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
def get_time_slots():
    return [f"{hour:02d}:{minute:02d}" for hour in range(10, 20) for minute in (0, 30)]

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
def get_available_dates():
    today = datetime.today()
    return [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(30)]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot_app = (
    Application.builder()
    .token(TOKEN)
    .updater(None)  # –û—Ç–∫–ª—é—á–∞–µ–º polling
    .build()
)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    buttons = [
        ["üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫"],
        ["üìú –ú–µ–Ω—é"],
        ["üè† –û –Ω–∞—Å"],
        ["üõé –í—ã–∑–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª"],
    ]
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gourmet Haven!", reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    chat_id = update.message.chat_id

    if text == "üìú –ú–µ–Ω—é":
        for category, items in menu.items():
            await update.message.reply_text(f"{category}:\n" + "\n".join(items))
    elif text == "üè† –û –Ω–∞—Å":
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω Gourmet Haven!\n–ê–¥—Ä–µ—Å: —É–ª. –ì–ª–∞–≤–Ω–∞—è, 15\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX"
        )
    elif text == "üõé –í—ã–∑–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª":
        await update.message.reply_text("–°–µ–π—á–∞—Å –ø–æ–∑–æ–≤–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª!")
    elif text == "üçΩ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫":
        await update.message.reply_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
@app.route("/", methods=["GET"])
def home():
    return "Bot is running!", 200

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook (Telegram -> Flask -> Bot)
@app.route(f"/{TOKEN}", methods=["POST"])
async def handle_webhook():
    try:
        update = Update.de_json(request.get_json(), bot_app.bot)
        await bot_app.process_update(update)
        return "", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {e}")
        return "", 500

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
async def set_webhook():
    await bot_app.initialize()  # –í–∞–∂–Ω–æ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π Webhook
    await bot_app.bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(set_webhook())  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Flask

port = os.getenv("PORT")
print(f"Render PORT: {port}")  # –í—ã–≤–µ–¥–µ—Ç –ø–æ—Ä—Ç –≤ –ª–æ–≥–∞—Ö Render

if not port:
    print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    exit(1)  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ PORT –Ω–µ –∑–∞–¥–∞–Ω

port = int(port)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
app.run(host="0.0.0.0", port=port)

